pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('ACESS_KEY')
        AWS_SECRET_ACCESS_KEY = credentials('SECRET_KEY')
        AWS_REGION = 'us-east-1'
        PROPERTIES_PATH = 'angular-java/spring-backend/src/main/resources/application.properties'
        SCHEMA_PATH = 'angular-java/springbackend.sql'
        RDS_ENDPOINT_FILE = '/var/lib/jenkins/workspace/Terraform-pipeline/terraform/rds_endpoint.txt'
    }
    stages {
        stage('Get RDS Endpoint from File') {
            steps {
                script {
                    if (fileExists(RDS_ENDPOINT_FILE)) {
                        env.RDS_ENDPOINT = readFile(RDS_ENDPOINT_FILE).trim().replaceAll('"', '')
                        echo "RDS Endpoint: ${env.RDS_ENDPOINT}"
                    } else {
                        error("RDS endpoint file does not exist: ${RDS_ENDPOINT_FILE}")
                    }
                }
            }
        }
        stage('Update application.properties') {
            steps {
                // Fetch the database username and password stored as separate secret text
                withCredentials([
                    string(credentialsId: 'username', variable: 'DB_USER'),
                    string(credentialsId: 'password', variable: 'DB_PASSWORD')
                ]) {
                    script {
                        // Use the fetched credentials to update the application.properties file
                        sh """
                        echo "Updating application.properties with RDS and DB credentials..."
                        sed -i "s|^spring.datasource.url=.*|spring.datasource.url=jdbc:mysql://${env.RDS_ENDPOINT}/springbackend?useSSL=false|" ${PROPERTIES_PATH}
                        sed -i "s|^spring.datasource.username=.*|spring.datasource.username=${DB_USER}|" ${PROPERTIES_PATH}
                        sed -i "s|^spring.datasource.password=.*|spring.datasource.password=${DB_PASSWORD}|" ${PROPERTIES_PATH}
                        """
                    }
                }
            }
        }
        stage('Insert Database Schema') {
            steps {
                // Fetch credentials again for the MySQL connection during schema insertion
                withCredentials([
                    string(credentialsId: 'username', variable: 'DB_USER'),
                    string(credentialsId: 'password', variable: 'DB_PASSWORD')
                ]) {
                    script {
                        // Insert the schema into the database
                        sh """
                        echo "Creating database 'springbackend' if it doesn't exist..."
                        mysql -h ${env.RDS_ENDPOINT} -u ${DB_USER} -p${DB_PASSWORD} -e "CREATE DATABASE IF NOT EXISTS springbackend;"

                        echo "Inserting schema into the 'springbackend' database..."
                        mysql -h ${env.RDS_ENDPOINT} -u ${DB_USER} -p${DB_PASSWORD} springbackend < ${SCHEMA_PATH}
                        """
                    }
                }
            }
        }
        stage('Clear Workspace') {
            steps {
                // Cleanup workspace but keep Jenkins essential files
                cleanWs()
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution completed.'
        }
        failure {
            echo 'Pipeline failed.'
        }
        success {
            echo 'Pipeline succeeded.'
        }
    }
}
