pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = 'us-east-1'
        PROPERTIES_PATH = credentials('APPLICATION_PROPERTIES_PATH')
        SCHEMA_PATH = credentials('DB_SCHEMA_PATH')

    }
    stages{
        stage('Checkout SCM'){
            steps{
                script{
                    checkout(scmGit(
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[url: 'https://github.com/Imsk31/angular-springboot.git']]
                    ))
                }
            }
        }
        stage('Initializing Terraform'){
            steps{
                script{
                    dir('terraform'){
                         sh 'terraform init'
                    }
                }
            }
        }
        stage('Validating Terraform'){
            steps{
                script{
                    dir('terraform'){
                         sh 'terraform validate'
                    }
                }
            }
        }
        stage('Previewing the infrastructure'){
            steps{
                script{
                    dir('terraform'){
                         sh 'terraform plan'
                    }
                    input(message: "Approve?", ok: "proceed")
                }
            }
        }
        stage('Create/Destroy an EKS cluster'){
            steps{
                script{
                    dir('terraform'){
                         sh 'terraform $action --auto-approve'
                    }
                }
            }
        }
        stage('Get RDS Endpoint') {
            steps {
                script {
                    def output = sh(script: "terraform output rds_endpoint", returnStdout: true).trim()
                    env.RDS_ENDPOINT = output
                }
            }
        }
        stage('Update application.properties') {
            steps {
                script {
                    // Use Jenkins environment variables to dynamically insert the RDS endpoint
                    sh """
                    sed -i 's|^spring.datasource.url=.*|spring.datasource.url=jdbc:mysql://${RDS_ENDPOINT}:3306/springbackend?useSSL=false|' ${PROPERTIES_PATH}
                    sed -i 's|^spring.datasource.username=.*|spring.datasource.username=${DB_USER}|' ${PROPERTIES_PATH}
                    sed -i 's|^spring.datasource.password=.*|spring.datasource.password=${DB_PASSWORD}|' ${PROPERTIES_PATH}
                    """
                }
            }
        }
        stage('Insert Database Schema') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'db_credentials', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')]) {
                    script {
                        sh 'mysql -h ${RDS_ENDPOINT} -u ${DB_USER} -p${DB_PASSWORD} springbackend < angular-project/angular-java/springbackend.sql'
                    }
                }
            }
        }
    }
}

